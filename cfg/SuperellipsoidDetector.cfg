#!/usr/bin/env python

PACKAGE="capsicum_superellipsoid_detector"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

enum_cost_type = gen.enum([
    gen.const("NAIVE", int_t, 0, "Uses the superellipsoid parametric representation directly."),
    gen.const("LEHNERT", int_t, 1, "Lehnert's implementation squares the parametric function value compared to Solina's method."),
    gen.const("RADIAL_EUCLIDIAN_DISTANCE", int_t, 2, "Works better with non-equilateral superellipsoids and estimates inside the shape better."),
    gen.const("SOLINA", int_t, 3, "Solina's distance approximation method with volume constraint. Estimates better for equilateral superellipsoids."),
    gen.const("SOLINA_DISTANCE", int_t, 4, "Solina's distance approximation method.")],
    "Optimization Function"
)
gen.add("p_cost_type", int_t, 0, "The cost function for fitting superellipsoids to the input points. RADIAL_EUCLIDIAN_DISTANCE and SOLINA are recommended options.", 2, 0, 4, edit_method=enum_cost_type)
gen.add("p_prior_center", double_t, 0, "The prior (alpha value in the formula) which enforcing optimized center **t** and center estimated via surface normals **p** to be close to each other. Higher values increases the regularization.", 0.1, 0, 1)
gen.add("p_prior_scaling", double_t, 0, "The prior (beta value in the formula) which is enforcing **a**, **b**, **c** values define the scaling of superellipsoid to be close to each other. Higher values increase the regularization. Different than the volume constraint.", 0.1, 0, 1)
gen.add("p_missing_surfaces_num_samples", int_t, 0, "The number of points being used to find points belonging to missing surfaces with rejection sampling.", 0.1, 0, 1)
gen.add("p_missing_surfaces_threshold", double_t, 0, "In meters. Points sampled with the projected Fibonacci sphere method are compared to the input data points. If the distance is higher than the threshold, the point will be marked as a missing surface point.", 0.015, 0.001, 1.0)
gen.add("p_min_cluster_size", int_t, 0, "Discards clusters smaller than this value.", 100, 10, 1000)
gen.add("p_max_cluster_size", int_t, 0, "Discards clusters larger than this value.", 10000, 100, 1000000)
gen.add("p_max_num_iterations", int_t, 0, "The maximum number of optimization iterations.", 100, 1, 1000)
gen.add("p_cluster_tolerance", double_t, 0, "In meters. Groups two points with smaller distance than this value into the same cluster.", 0.01, 0.0001, 1.0)
gen.add("p_estimate_normals_search_radius", double_t, 0, "In meters. Search radius for surface normal estimation.", 0.015, 0.0001, 1.0)
gen.add("p_estimate_cluster_center_regularization", double_t, 0, "Regularization for the intersection of lines estimation. Defines a bias towards the mean of cluster points. Higher values bring the result towards the bias point. Useful when there are not enough surfaces.", 2.5, 0.0, 9999.0)
gen.add("p_pointcloud_volume_resolution", double_t, 0, "In meters. Resolution of the pointcloud in **~superellipsoids_volume** message.", 0.001, 0.001, 1.0)
gen.add("p_octree_volume_resolution", double_t, 0, "In meters. Resolution of the pointcloud in **~superellipsoids_volume_octomap** message.", 0.001, 0.001, 1.0)
gen.add("p_print_ceres_summary", bool_t, 0, "Enables printing cost, gradients, extra information, etc. for each optimization step.", False)
gen.add("p_use_fibonacci_sphere_projection_sampling", bool_t, 0, "If true, uses our approach for sampling of superellipsoid surfaces which distributes points on the surface uniformly. If false, uses the superellipsoid parametric representation which enables easier perceiving the orientation of the superellipsoids. This only affects the the output of **~superellipsoids_surface** message.", False)
gen.add("p_world_frame", str_param, 0, "World transform frame.", "world")

exit(gen.generate(PACKAGE, "capsicum_superellipsoid_detector", "SuperellipsoidDetector"))